{
  "title": "ゼロから始めるAmazon Web Services入門を読みました",
  "closed": false,
  "archived": false,
  "created_at": "2022-09-27",
  "comments": [
    {
      "author": "ningen",
      "created_at": "2022-09-27",
      "body_markdown": "# クラウドサービスとは？\n\n情報システムを提供するときに必要になるサーバーやネットワークなどのインフラを提供するサービス。(IaaSの認識)\n\n逆に、データーセンターに自前のサーバーやネットワーク機器をおいて構築し、運用する方法をオンプレミスという\n\n## オンプレミスの課題\n\n- サーバーの設置、ネットワークの敷設に日数がかかる（スケールアップ、スケールアウトに時間かかる）\n- 保守が必要（サポートが切れる前に機材を変えたり、バージョンアップしたり）\n- 障害対策にコストがかかる（バックアップ用のサーバー用意）\n  \n## クラウドサービスは？\n\n- 仮想化技術を使ってサーバー、ネットワークを構築しているので、増設がすぐできる\n- 保守はクラウドサービスを提供する会社がしているので不要\n- 障害が起きてもすぐ新しいサーバーを建てられる、そもそもクラウドサービスの可用性が高い\n- サーバーのスペック変更も簡単\n\n\n## マネージドサービスとアンマネージドサービス\n\n素のままのサーバーを貸し出すサービスを「アンマネージドサービス」、予め設定された状態で貸し出すサービスを「マネージドサービス」という\n\nマネージドサービスの利点は自分でソフトウェアを入れたり、設定する必要がなく、保守運用もクラウドサービスに任せられること。\n\nまた、マネージドサービスとアンマネージドサービスには責任分界点（どこまでがクラウドサービス側が対応してくれて、どこまでが自分たちで担当するかの境界）の違いもある。\n\n\n# Amazon Web Services(AWS)\n\nAWSは日本を含む、全世界15ヶ所で展開されており、展開されている地域のことを**リージョン**という。\n\nAWSの利用者は好きなリージョンに仮想サーバーや仮想ネットワークなどを構築して運用することができる。\n\n日本国内から利用する場合は「東京リージョン(ap-northeast-1)」を使うことが多い（当然の話だけど、離れるとレスポンスが遅くなる）\n\n東京リージョン以外を使う理由としては以下の理由がある。\n\n- 東京リージョンでは、まだ提供されていないサービスを使いたい\n- 東京リージョンより、安く運用したい\n- 東京リージョンが万が一異常を起こしたときのバックアップとして、別のリージョンに設置しておきたい\n\n## AWSで提供されているサービスについて\n\nAWSではマネージドサービスが多く提供されている。(100以上)\n\nAWSでよく使われるサービスは以下の通り\n\n| サービス名                        | マネージド・アンマネージド | 概要                                  |\n| -------------------------------- | ------------------------ | ------------------------------------ |\n| IAM                              |                          | ユーザやグループの管理、認証をする仕組み |\n| VPC(Virtual Private Cloud)       | アンマネージド            | 仮想ネットワーク                       |\n| EIP(Elastic IP)                  | アンマネージド            | 固定IPアドレスを割り当てる              |\n| EC2(Elastic Compute Cloud)       | アンマネージド            | 仮想サーバー                           |\n| EBS(Elastic Block Store)         | アンマネージド            | 仮想サーバーなどで使うストレージ         |\n| S3(Simple Storage Service)       | マネージド                | 汎用的なストレージサービス              |\n| RDS(Relational Database Service) | マネージド                | データベースサービス                   |\n| Route 53                         | マネージド                | DNSサービス                           |\n| CloudFront                       | マネージド                | キャッシュ機能を提供する(暗号化の機能もある |\n| ELB(Elastic Load Balancing)      | マネージド                | 複数のEC2に負荷分散する(暗号化の機能もある) |\n\n## AWSのデメリット\n\n1. 定額での運用ができない\n2. 自分ですべてをコントロールできなくなる\n3. サービスがいつまで提供されるかわからない\n\n"
    },
    {
      "author": "ningen",
      "created_at": "2022-09-27",
      "body_markdown": "# Webサーバーの仕組みと作り方\n\nAWSを使ってWebサーバーを構築する方法は主に2つある。\n\n- EC2を使う方法\n- S3を使う方法\n\n今はS3を使う方法で進めていく\n\nS3は、ストレージサービスを提供するマネージドサービス。\n\nS3においてファイルの置き場は、「S3バケット」と呼ばれる\n\nS3を使ってファイルを管理するには、AWSのマネジメントコンソールから操作して、その置き場になるS3バケットを作る必要がある\n\n## S3を使ったWebサーバーの構成\n\n（個人的には静的ファイル配信してるだけなので、サーバーではない気がする）\n\nまず、S3バケットを作成する。\n作成したS3バケットには以下の2つの設定をする\n\n1. Webサーバー機能をオンにする\n\nそもそも、S3はファイル置き場なので、設定をしないと配信してくれない。\n\nS3バケットの設定画面から`Static website hosting`を有効することで、配信してくれるようにする。\n\n2. 匿名アクセスできるようにする。\n\n最初の状態では、S3バケットを作ったときに許可したユーザーしかアクセスできない。\n\nそのため、匿名アクセスを有効にして誰でもアクセスできるようにする。\n\n独自ドメインで配信したい場合は、以下の2つの設定をする\n\n1. S3バケットの名前をドメイン名でつける※名前の変更はできない\n2. DNSサーバーの設定で、S3宛に名前解決するようにする\n\n暗号化したい場合は、S3にアクセスする前にCloudFrontを設置して、暗号化させる必要がある。\n\n## S3の特徴と料金\n\nS3のバケット名はすべてのS3バケットと重複しないように名前付けする必要がある。\n\nまた、S3バケッドには「ストレージクラス」という概念があり、高品質（高速・高耐久性・高可用性）になるほど料金が高くなる\n\n## 実際にS3から配信してみる\n\n前提: S3バケット作成済\n\n### 配信許可\n\nプロパティ　→　静的ウェブサイトホスティング　→　有効にする。\n\n## バケットポリシーの設定\n\n### 匿名アクセスできるようにするポリシー\n\n既存のポリシーを選択するだけだと行うことができないため、カスタムポリシーと呼ばれる機能を使って、ポリシーを作る必要がある。\n\n匿名アクセスができるようになるカスタムポリシーの設定\n\n```json\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [{\n        \"Sid\": \"PublicReadGetObject\",\n        \"Effect\": \"Allow\",\n        \"Principal\": \"*\",\n        \"Action\": [\"s3:GetObject\"],\n        \"Resource\": [\"arn:aws:s3:::[バケット名]/*\"]\n    }]\n}\n```\n\n`Version`: この設定項目のバージョン番号\n`Sid`:　ポリシーの名称\n`Effect, Principal`: Effectは「許諾の種類」、Principalは「誰に対して」を指定。\n`Action, Resource`: Actionは「どんな操作を」、Resourceは「何に対して」を指定。\n\nResouceのFormat\n\n```\narn:aws:s3:リージョン:アカウント:バケット名/パス名\n```"
    },
    {
      "author": "ningen",
      "created_at": "2022-09-27",
      "body_markdown": "# LAMP サーバーで WordPress を動かそう\n\n## EC2 インスタンスとネットワーク\n\nEC2 インスタンスは AWS 上のどこかのネットワークに所属する。\n\nネットワークも仮想化されていて、「VPC」と呼ばれる\n\n「業務システム」、「社内システム」、「通販システム」みたいな別々のサービスを同じネットワークに配置すると邪魔になったり、セキュリティ上のリスクもある。\n\nそのため、それぞれのシステムごとで VPC を作成して、EC2 インスタンスを配置して動かせるようになっている。\n\n## デフォルトの VPC とデフォルトのサブネット\n\nAWS 上では予めインターネットに接続された VPC を、それぞれのリージョンごとに１つずつ用意している。\n\nVPC は「デフォルトのサブネット」という区画に分かれていて、いずれかのデフォルトサブネットに配置すれば、インターネットと接続ができる\n\n↑ 勝手に EC2 インスタンスが別のサブネットに移動することはないらしい\n\n## EC2 インスタンスの作成\n\n1. スペックを決める\n2. ディスクの容量、種類を決める\n3. ディスクイメージを決める（OS の入っているイメージ）\n\nt2.micro みたいに t2 = インスタンスタイプ, micro = インスタンスサイズ（CPU とかメモリの性能）で決める。\n\n今回は t2.micro を使う(1 年間無料!)\n\nまた、OS は Amazon Linux 2 を使う。\n\n## データを保存するディスクを構成する EBS\n\nEC2 インスタンスには、1 台以上のディスクが必要。\n\n一般的に扱うのは「EBS（Elastic BNlock Store,)」という機能で作られたボリューム。（EC2 インスタンスなどで使われるストレージを提供するサービス）\n\nEBS には以下の特徴がある。\n\n- 高いパフォーマンスと信頼性\n- スナップショットや複製を作ることができる\n- スケールアップが用意\n\n## EC2 の料金\n\nEC2 の料金=① インスタンス使用量+②EBS の費用+③ 通信費用+④ その他オプション\n\n- インスタンス使用量\n  - 稼働している秒単位での課金\n  - AWS 加入から 1 年の無料利用枠では、t2.micro インスタンスを 750 時間分/月の範囲で使える\n- EBS の費用\n  - 確保した容量単位の課金\n    - EC2 停止中も課金される\n  - AWS 加入から 1 年の無料利用枠では、月 30GB まで無償\n- 通信費用\n  - EC2 -> インターネットの通信で費用がかかる\n  - 無料枠では月 15GB まで無料\n- その他\n  - 固定 IP を割り当てる Elastic IP サービスなど、オプションのサービス\n\n# EC2 の操作と通信\n\n## セキュリティグループ\n\nEC2 とネットワークの間に、どのような種類の通信を許可するのか設定するファイアウォール機能がある。それをセキュリティグループという。\n\nインバウンド、アウトバウンドの制御ができる。\n\n---\n\nphp のバージョンが古く、エラーが発生していたので、下記コマンドで新しい php を入れた\n\nエラーの内容\n\n```\nParse error: syntax error, unexpected '.', expecting '&' or variable (T_VARIABLE) in /var/www/html/wp-includes/functions.php on line 1128\n```\n\n```\nsudo amazon-linux-extras install php7.4\n```\n"
    },
    {
      "author": "ningen",
      "created_at": "2022-09-27",
      "body_markdown": "# マネージドのデータベースサービス PDS\n\nRDS(Amazon Relational Database)\n\n## 対応しているデータベース製品\n\n- MySQL\n- MariaDB\n- PostgreSQL\n- Amazon Aurora\n- Oracle\n- Microsoft SQL Server\n\n## 料金\n\n- ストレージ費用\n  - 確保した量に対しての課金\n  - 1 年の無料枠では、20GB/月利用できる\n- DB インスタンスの費用\n  - 時間当たりの稼働費用\n  - 1 年の無料枠では、750 時間/月利用できる\n- バックアップストレージの費用\n  - スナップショットを、「バックアップストレージ」に置く、容量に応じて課金\n  - 1 年の無料枠では、20GB/月利用できる\n- 通信費用\n  - 転送量に応じた課金\n  - VPC 内の EC2 インスタンスとだけ通信するなど、同一アベイラビリティゾーン内でしか通信しない場合、費用はかからない。\n\n## RDB を利用するメリット、デメリット\n\n- メリット\n  - 保守管理などを AWS 側に任せられる（マネージドサービスなので）\n  - DB のバックアップやデータ消失は利用したほうが安全\n- デメリット\n  - EC2 内で運用するのに対し、少しコストがかかる\n  - マネージドサービスなので、構成に自由度が無い（高度なパフォーマンスチューニングが行えない）\n\nただ、安定運用できるメリットが大きいので、基本的には RDS を利用する。\n"
    },
    {
      "author": "ningen",
      "created_at": "2022-09-27",
      "body_markdown": "# IP アドレス・ドメイン名を設定するには\n\n今まで作ってきた、EC2 バケットによる Web サーバーや、WordPress のサーバーは IP アドレスでアクセスする必要があったり、デフォルトのドメインが長くて使いにくい。\n\nこの章では S3 の Web サーバー、Ec2 の Web サーバーに対して、わかりやすいドメイン名でアクセスできるようにする\n\nやること\n\n- 固定の IP を割り当てる\n  - Elastic IP\n  - DNS は IP アドレスとドメインを紐づけているので、IP が固定じゃないとだめ\n- ドメインを取得する\n  - AWS マネジメントコンソールから取得できる\n- ドメインを関連付ける\n"
    },
    {
      "author": "ningen",
      "created_at": "2022-09-27",
      "body_markdown": "# SSL/TLS で暗号化する\n\n1. EC2 インスタンスなどに証明書をインストールする\n2. ELB や CloudFront を使う\n\n2 の場合は、client -> ELB or CloudFront の経路で暗号化をされるが ELB or CloudFront -> EC2 の経路では暗号化されない\n\n今回は、ELB を使って https 化を行う\n\n- 証明書の作成\n  - AWS Certificate Manager を使って作成する（東京リージョン）\n- ロードバランサを配置する\n  - 証明書を設定し、SSL/TLS 通信を有効にする\n  - ロードバランサの下に EC2 が経路としてくるようにする必要がある\n\n証明書発行のときにドメインの署名者であることを検証する必要がある\nCNAME レコードを追加する必要があるが、Route53 を利用している場合は設定を自動で行える\n"
    },
    {
      "author": "ningen",
      "created_at": "2022-09-27",
      "body_markdown": "ELB, EC2, Route53, S3などの簡単な使い方を覚えることができた。\n\n権限周りのことや、実際にドメインを購入してDNSレコードを作成したり、AWSがよくわかっていない状態からすれば、かなり成長につながる本でした。"
    }
  ]
}