{
  "title": "達人プログラマ",
  "closed": false,
  "archived": false,
  "created_at": "2022-09-08",
  "comments": [
    {
      "author": "ningen",
      "created_at": "2022-09-08",
      "body_markdown": "達人プログラマを読み進めているので、自分へのメモも込めて雑に残していきます。\n\n（自分が特に気になった部分だけ残しています）",
      "body_updated_at": "2022-09-27"
    },
    {
      "author": "ningen",
      "created_at": "2022-09-08",
      "body_markdown": "ゆでガエルの部分や、割れ窓理論の部分は自分にとっていい影響を与えていると感じています。\n\nビジネスロジックの複雑化、負債になっていくコードが存在しており、「もともとこうだから...」と思ってしまい、コードがどんどん汚くなっていくのを体感することができました。\n\n徐々に汚くなっていくコードに慣れてしまい、改善するという発想にも思い至らず、悪循環になっていました。\n\nこの部分を読み、綺麗なコードを書くこと、負債となっている部分を減らしていくことを意識できるようになりました。\n\nただ、すぐには負債は返済できず、思うように綺麗なコードを書けない自分がいることを認識しました...\n\n自分がかける最善なコードを書いているはずなのに、出来たものはそこまで綺麗ではなく、ビジネスロジック、オブジェクトの操作、ハンドリングがごちゃごちゃしています。\n\n今までは目的を達成するためにコードを書いており、綺麗なコードを書く技術は身についていなかったので、そこにフォーカスを当てて、技術向上をすることが大切だと思いました。",
      "body_updated_at": "2022-09-08"
    },
    {
      "author": "ningen",
      "created_at": "2022-09-08",
      "body_markdown": "DRY原則\n\nロジック部分では重複がないようにすることは意識できていると思っていますが、型の部分やドキュメントでは、意識できていませんでした。\n\n同じ役割を持つ型が複数箇所にあったり、似たようなドキュメントが複数ありどれを確認するべきか迷う場面が何回かありました。\n\nこういったロジック部分以外でも、重複がないように意識することが大切だと感じています。\n\n"
    },
    {
      "author": "ningen",
      "created_at": "2022-09-15",
      "body_markdown": "プロトタイプ周りについて\n\nその時点での、最小のコードで検証できることがいい。\n\nまた、プロトタイプを作成して得た教訓が一番ポイント。\n\n--> 経験することで同じような問題に直面したときに適切に対応できると感じた。\n\n最小のコードではなく詳細を意識する必要がある場合は前の章に書いていた曳光弾でのアプローチがいい"
    },
    {
      "author": "ningen",
      "created_at": "2022-09-15",
      "body_markdown": "↑プロトタイプで無視できる「詳細」\n\n正確性（ダミーデータを使える）\n完全性（一部の機能だけでもいい）\n堅牢性（エラーチェックは今の段階では入れなくてもいい）\nスタイル？（ここだけ理解できませんでした）\n\nプロトタイプは最後には捨てることになる"
    },
    {
      "author": "ningen",
      "created_at": "2022-09-18",
      "body_markdown": "24　死んだプログラムは嘘をつかない\n\n以前自分もerrorをキャッチして握りつぶしてしまったことがある。\nそのせいで、本来はログが残るはずが残らなくなってしまい、原因調査が困難になった。\n\nあと、呼び出し側がどのようなエラーを出されるか知っておく必要があり、結合度があがってしまうとの記述がある。\n\n結合度の部分については、自分的にはあまりしっくり来なかった。\n仕様として、どんなエラーが投げられる可能性があるかは把握しておく必要があると思ったので…。\n\nただ、エラーが増えると今までのコードが過去のものになってしまうという点では、そのとおりだと理解できた",
      "body_updated_at": "2022-09-19"
    },
    {
      "author": "ningen",
      "created_at": "2022-09-19",
      "body_markdown": "27 ヘッドライトを追い越そうとしない。\n\n自分の予測できる範囲にタスクを小さくする必要がある。\nエンジニアが予測できる範囲はせいぜい、数時間-数日程度。\nそれ以上は、推測や乱暴な予測になってしまう。\n"
    },
    {
      "author": "ningen",
      "created_at": "2022-09-25",
      "body_markdown": "Observerパターン、Publisher, Subscriber\n\nAngularで使われているのをよく見る。（フロントエンドに対する知見はあんまりないですが...）\n\n状態管理として考えるとReactでもReduxがあったりするが、バックエンドではあまり使われていない気がする。\n\nバックエンドでも、イベント駆動（言葉が正しくないかもしれません）のように「注文」が作成されたら、通知を送るmethodを実行するように購読すれば、ロジック部分にコードが集中できそうなので、応用できそう。\n\n直接的なロジックに関係しない、副作用のあるメソッドを購読するイメージです。\nただ、どのイベントが発生したか正しく認識させる、登録させる部分がネックだと思いました。\n\nめちゃくちゃ思いつきですが、デコレーターで購読するのは便利そうな気がしました。\n\n\n```typescript\n// こんな感じで実現できたらいいなというコードです\n// Registerで呼ばれた登録された関数の処理が終了したら、Subscribeで購読しているイベントを呼び出すイメージ\nclass Test1 {\n  constructor() {}\n\n  @Subscribe('OrderCreated')\n  public orderCreatedEvent(event: subscribeEvent) {\n    /* 処理 */\n  }\n}\n\nclass Logic {\n  @Register('OrderCreated')\n  public createOrder() {\n    /* 処理 */\n  }\n}\n```",
      "body_updated_at": "2022-09-25"
    },
    {
      "author": "ningen",
      "created_at": "2022-09-26",
      "body_markdown": "偶発的プログラミング\n\n「ヘッドライトを追い越そうとしない」に通ずる部分があると感じた。\n\n自分の知らない部分の範囲について、知らないままで進めることは、意図せず動かなくなったりする可能性がある。\nこのコードが何をしているのか、どういう意図（コンテキスト）があるのかを理解して開発を行う必要がある。 -> 慎重なプログラミングを行う\n\n外部モジュールを使う場合は、抽象化して理解する必要はある\n\n自分は今まで、偶発的プログラミングをしていた。\n過度に抽象化をしていて、「～だろう」や思い込みでプログラミングしている。\n\n抽象化しているせいで、プロダクトの詳細な仕様が把握できておらず、QAのテスト実施の際には、迷惑をかけてしまった。。。\n\n仕様をしっかり説明できる状態でプログラミングをすることを心がける。"
    }
  ]
}